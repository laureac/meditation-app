{"version":3,"sources":["images/aust1.jpg","images/photo1.jpg","images/photo2.jpg","images/photo3.jpg","images/photo6.jpg","images/photo4.jpg","images/photo7.jpg","images/photo8.jpg","images/photo9.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","tl","gsap","timeline","defaults","ease","stagger","SwiperCore","use","EffectCube","slides","img","img1","img2","img3","img6","img7","img8","img4","useEffect","to","y","duration","fromTo","opacity","className","effect","map","el","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,4FCA3CD,EAAOC,QAAU,IAA0B,oC,yRC8D5BC,MA5Cf,WAEE,IAAMC,EAAKC,IAAKC,SAAS,CAACC,SAAU,CAAEC,KAAM,aAAcC,QAAS,OAEnEC,IAAWC,IAAI,CAACC,MAChB,IAAMC,EAAS,CAACC,IAAKC,IAAMC,IAAMC,IAAMC,IAAMC,IAAMC,IAAMC,KASzD,OAPAC,qBAAU,WACRlB,EAAGmB,GAAG,QAAS,CAACC,EAAG,KAAMC,SAAU,IACnCrB,EAAGmB,GAAG,UAAW,CAACC,EAAG,QAASC,SAAU,KAAM,QAC9CrB,EAAGmB,GAAG,SAAU,CAACC,EAAG,QAASC,SAAU,GAAI,SAC3CrB,EAAGsB,OAAO,MAAO,CAACC,QAAS,KAAM,CAACA,QAAS,IAAKF,SAAU,OAI1D,yBAAKG,UAAU,OACb,6BAASA,UAAU,WACjB,yBAAKA,UAAU,MACb,qCACA,kBAAC,IAAD,CAAQC,OAAO,QACdhB,EAAOiB,KAAI,SAACC,GACX,OAAO,kBAAC,IAAD,KAAa,yBAAKC,IAAKD,WAKpC,yBAAKH,UAAU,SACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QACb,0BAAMA,UAAU,QAAhB,6BAEF,yBAAKA,UAAU,QACb,0BAAMA,UAAU,QAAhB,qBAEF,yBAAKA,UAAU,QACb,0BAAMA,UAAU,QAAhB,gBAIN,yBAAKA,UAAU,aC7CDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19c10fc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aust1.9ff183b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/photo1.b1d18279.jpg\";","module.exports = __webpack_public_path__ + \"static/media/photo2.df4b4bf4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/photo3.50ef8b95.jpg\";","module.exports = __webpack_public_path__ + \"static/media/photo6.a5672413.jpg\";","module.exports = __webpack_public_path__ + \"static/media/photo4.ab79f7da.jpg\";","module.exports = __webpack_public_path__ + \"static/media/photo7.db0083e5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/photo8.38cca623.jpg\";","module.exports = __webpack_public_path__ + \"static/media/photo9.e881e4af.jpg\";","import React, { useRef, useEffect, useState } from \"react\";\nimport './App.scss'\nimport {gsap} from 'gsap';\n\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport SwiperCore, {EffectCube} from 'swiper';\nimport 'swiper/swiper-bundle.css';\nimport 'swiper/components/effect-cube/effect-cube.scss';\nimport img from './images/aust1.jpg'\nimport img1 from './images/photo1.jpg'\nimport img2 from './images/photo2.jpg'\nimport img3 from './images/photo3.jpg'\nimport img6 from './images/photo6.jpg'\nimport img4 from './images/photo4.jpg'\nimport img7 from './images/photo7.jpg'\nimport img8 from './images/photo8.jpg'\nimport img9 from './images/photo9.jpg'\n\nfunction App() {\n\n  const tl = gsap.timeline({defaults: { ease: 'power1.out', stagger: .25}});\n\n  SwiperCore.use([EffectCube]);\n  const slides = [img, img1, img2, img3, img6, img7, img8, img4];\n\n  useEffect(() => {\n    tl.to('.text', {y: '0%', duration: 1});\n    tl.to('.slider', {y: '-100%', duration: 1.5}, '+=.5');\n    tl.to('.intro', {y: '-100%', duration: 1}, '-=1.5');\n    tl.fromTo('.hi', {opacity: '0'}, {opacity: '1', duration: 1});   \n  });\n\n  return (\n    <div className=\"App\">\n      <section className='landing'>\n        <div className='hi'>\n          <h1>SWIPE</h1>\n          <Swiper effect=\"cube\">\n          {slides.map((el) => {\n            return <SwiperSlide><img src={el}/></SwiperSlide>;\n          })}\n          </Swiper>\n        </div>\n      </section>\n      <div className='intro'>\n        <div className='intro-text'>\n          <div className='hide'>\n            <span className='text'>Discover The Wonderfull </span>\n          </div>\n          <div className='hide'>\n            <span className='text'>Island Continent</span>\n          </div>\n          <div className='hide'>\n            <span className='text'>Australia</span>\n          </div>\n        </div>\n      </div>\n      <div className='slider'></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}