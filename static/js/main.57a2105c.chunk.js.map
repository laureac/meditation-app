{"version":3,"sources":["image.png","component/PlayerContenaire.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlayerContenaire","props","stop","audio","setState","playing","state","currentTime","Howl","src","format","autoplay","loop","volume","handlePlay","bind","setInterval","seek","secs","minutes","Math","floor","seconds","this","play","pause","className","onClick","time_convert","React","Component","App","id","image","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,mC,yPC2E5BC,E,kDAtEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IA2CVC,KAAO,WACL,EAAKC,MAAMD,OACX,EAAKE,SAAS,CACZC,SAAS,KA7CT,EAAKC,MAAQ,CACXD,SAAS,EACTE,YAAa,IAEf,EAAKJ,MAAO,IAAIK,OAAK,CACnBC,IAAK,CAAC,sHACNC,OAAQ,CAAC,OACTC,UAAU,EACVC,MAAM,EACNC,OAAQ,KAEV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAbF,E,gEAiBG,IAAD,OAClBC,aAAY,WACV,EAAKZ,SAAS,CAACG,YAAa,EAAKJ,MAAMc,WACtC,O,mCAIOC,GAEZ,IAAIC,EAAUC,KAAKC,MAAMH,EAAO,KAAO,EACnCI,EAAUF,KAAKC,MAAMH,EAAiB,GAAVC,IAAiB,EACjD,GAAGD,EACH,OAAOC,EAAU,KAAOG,EAAU,GAAK,IAAM,IAAMA,I,oCAK3B,IAArBC,KAAKjB,MAAMD,SACZkB,KAAKpB,MAAMqB,OACbD,KAAKnB,SAAS,CACZC,SAAS,MAETkB,KAAKpB,MAAMsB,QACXF,KAAKnB,SAAS,CACZC,SAAS,O,+BAWX,OACE,oCACA,yBAAKqB,UAAU,aACb,yBAAKA,UAAU,WACS,IAAvBH,KAAKjB,MAAMD,SACX,4BAAQqB,UAAU,OAAOC,QAASJ,KAAKT,YAAY,8BAAM,uBAAGY,UAAU,mBAC/C,IAAvBH,KAAKjB,MAAMD,SACX,4BAAQqB,UAAU,OAAOC,QAASJ,KAAKT,YAAY,8BAAM,uBAAGY,UAAU,mBACvE,4BAAQA,UAAU,OAAOC,QAASJ,KAAKrB,MAAM,8BAAM,uBAAGwB,UAAU,mBAEhE,yBAAKA,UAAU,QAAQH,KAAKK,aAAaL,KAAKjB,MAAMC,oB,GA/D7BsB,IAAMC,WCsBtBC,MApBf,WACE,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,yCACA,0CACA,6BADA,kBAIF,yBAAKA,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKM,GAAG,QAAQvB,IAAKwB,IAAOC,IAAI,cAChC,yBAAKR,UAAU,aAEnB,kBAAC,EAAD,SCRcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.57a2105c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.f4b45724.png\";","import React from 'react';\r\nimport './player.scss';\r\nimport { Howl} from 'howler';\r\n\r\nclass PlayerContenaire extends React.Component { \r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      playing: false,\r\n      currentTime: ''\r\n    }\r\n    this.audio= new Howl({\r\n      src: ['https://www.westernsydney.edu.au/__data/assets/file/0020/160319/Brief_Relaxation_Session_with_background_music.mp3'],\r\n      format: ['mp3'],\r\n      autoplay: false,\r\n      loop: false,\r\n      volume: 0.5,\r\n    })\r\n    this.handlePlay = this.handlePlay.bind(this)\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    setInterval(() => {\r\n      this.setState({currentTime: this.audio.seek()})\r\n    }, 1000)\r\n  }\r\n  \r\n\r\n time_convert(secs)\r\n { \r\n  let minutes = Math.floor(secs / 60) || 0;\r\n  let seconds = Math.floor(secs - minutes * 60) || 0;\r\n  if(secs){\r\n  return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n  }        \r\n}\r\n\r\nhandlePlay () {\r\n  if(this.state.playing===false){\r\n    this.audio.play()\r\n  this.setState({\r\n    playing: true\r\n  })}else{\r\n    this.audio.pause()\r\n    this.setState({\r\n      playing: false\r\n    })}\r\n}\r\nstop = () =>{\r\n  this.audio.stop();\r\n  this.setState({\r\n    playing: false\r\n  })\r\n}\r\n  \r\n  render(){\r\n    return (\r\n      <>\r\n      <div className=\"TrackList\">\r\n        <div className='toggle'>\r\n        {this.state.playing === false && \r\n        (<button className='play' onClick={this.handlePlay}><span><i className=\"fas fa-play\" /></span></button>  )}\r\n        {this.state.playing === true && \r\n        (<button className='play' onClick={this.handlePlay}><span><i className=\"fas fa-pause\" /></span></button>)}\r\n        <button className='stop' onClick={this.stop}><span><i className=\"fas fa-stop\"></i></span></button>\r\n        </div>\r\n        <div className='time'>{this.time_convert(this.state.currentTime)}</div>\r\n        </div>\r\n        </>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default PlayerContenaire;\r\n\r\n","import React from 'react';\nimport './App.scss';\nimport image from './image.png';\nimport PlayerContenaire from './component/PlayerContenaire';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>#stayhome</h2>\n        <h1>The Journey\n        <br/>\n        Begins Inside</h1>\n      </header>\n      <div className='main'>\n        <div className=\"woman-wrapper\">\n          <img id='woman' src={image} alt='woman-zen' />\n          <div className='ellipse'></div>\n        </div>\n      <PlayerContenaire />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}